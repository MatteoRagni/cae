#!/usr/bin/env python3

# Importing libraries
# For using my GPU I have to do that...
# export TF_MIN_GPU_MULTIPROCESSOR_COUNT=2

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import sys
sys.path.insert(0, './lib')

import pdb
import os
from timer import Timer
from timer import timestring
import json
from argparse import ArgumentParser

# PARSING COMMAND LINE ARGUMENTS
cmd = ArgumentParser(prog="cae-bin",
                     description="Stacked Convolutional Autoencoder",
                     epilog="Matteo Ragni, David Windridge - 2016")

DEFAULT_TRAINING_DIR  = '/tmp/training_nn'
CURRENT_TRAINING_TIME = timestring()
DEFAULT_RUNNING_DIR   = os.path.join(DEFAULT_TRAINING_DIR, CURRENT_TRAINING_TIME + '-run')
DEFAULT_SAVING_DIR    = os.path.join(DEFAULT_TRAINING_DIR, 'save-' + CURRENT_TRAINING_TIME + '-cae.ckpt')
DEFAULT_BATCH_SIZE    = 10
DEFAULT_STEP_SIZE     = 10
DEFAULT_LEARN_RATE    = 0.01
VERBOSITY             = 1
BATCH_LIMIT           = 7

# TODO: Modify run and training dir to add a single
# voice to define the path, and another to define the run.

cmd.add_argument('-in', dest='dataset', type=str, nargs=1, required=True,
                 help='Input dataset for the training')
cmd.add_argument('-gpu', dest='gpu', action='store_true',
                 help='Enable CUDA and CuDNN [NO]')
cmd.add_argument('-r', '--run', dest='runs', type=str, nargs=1, default=DEFAULT_RUNNING_DIR,
                 help='Define a specific run directory [%s]' % DEFAULT_RUNNING_DIR)
cmd.add_argument('-s', '--save', dest='save', type=str, nargs=1, default=DEFAULT_SAVING_DIR,
                 help='Define save positions for the result of the training, as checkpoint [%s]' % DEFAULT_SAVING_DIR)
cmd.add_argument('-bs', '--batchsize', dest='batchsize', type=int, nargs=1, default=DEFAULT_BATCH_SIZE,
                 help='Define the size of each batch. It must be compatible with RAM or VRAM capabilities. It must be positive [%d]' % DEFAULT_BATCH_SIZE)
cmd.add_argument('-ss', '--stepsize', dest='stepsize', type=int, nargs=1, default=DEFAULT_STEP_SIZE,
                 help='Define the number of step optimizer will run on each batch. It must be positive [%d]' % DEFAULT_STEP_SIZE)
cmd.add_argument('-lr', '--learnrate', dest='learnrate', type=float, nargs=1, default=DEFAULT_LEARN_RATE,
                 help='Define the learning rate for the optimizer [%f]' % DEFAULT_LEARN_RATE)
cmd.add_argument('-v', '--verbosity', dest='verb', type=int, nargs=1, default=VERBOSITY,
                 help='Define verbosity level, from 0 to 3 [%d]' % VERBOSITY)
cmd.add_argument('-rl', '--residual-learning', dest='residuals', action='store_true',
                 help='Enable residual learning (NO -> y = f(g(x)), YES -> y = f(g(x)) + x) [NO]')
cmd.add_argument('-tg', '--telegram', dest='telegram', action='store_true',
                 help='Enable notifications using system telegram bot [NO]')
cmd_args = cmd.parse_args()

# Handles the command line arguments and check everything is ok
try:
    assert os.path.isfile(' '.join(cmd_args.dataset)), "Dataset file [%s] does not exist" % ' '.join(cmd_args.dataset)
    assert cmd_args.stepsize  > 0,                     "Step size must be a positive integer"
    assert cmd_args.batchsize > 0,                     "Batch size must be a positive integer"
    assert cmd_args.learnrate  > 0.0,                   "Batch size must be a positive float"
except AssertionError as error:
    print("Input Error10: " + str(error))
    exit(126)

if cmd_args.verb > 3:
    VERBOSITY = 3
elif cmd_args.verb < 0:
    VERBOSITY = 0

def batch_loop(length):
    VERBOSITY = cmd_args.verb[0]

DEVICE_PLACEMENT_LOG = True if VERBOSITY > 1 else False

# Telegram notifications
if cmd_args.telegram:
    from tg_notifier import TelegramNotifier
    notifier = TelegramNotifier()
    def notify(m):
        notifier.post(m)
else:
    def notify(m):
        pass

# Logging function
def log(s, l=1):
    if l >= VERBOSITY:
        print(s)
    if l == 1:
        notify(str(s))

# MAIN PART
from six.moves import cPickle as pickle
import numpy as np
import tensorflow as tf
import autoencoder


# Some definitions on the engine
FLAGS = tf.app.flags.FLAGS
tf.app.flags.DEFINE_string('dataset_file',
                           cmd_args.dataset[0],
                           "Dataset file for training")
tf.app.flags.DEFINE_string('train_dir',
                           cmd_args.runs,
                           "Training directory")
tf.app.flags.DEFINE_string('saver_dir',
                           cmd_args.save,
                           "Chackpoint file for saving")
tf.app.flags.DEFINE_integer('max_steps',
                            cmd_args.stepsize,
                            "Number of steps for the optimizer on each batch")
tf.app.flags.DEFINE_integer('batch_size',
                            cmd_args.stepsize,
                            "Number of elements in each batch")
tf.app.flags.DEFINE_boolean('log_device_placement',
                            DEVICE_PLACEMENT_LOG,
                            "Logging of the use of my device")
tf.app.flags.DEFINE_boolean('gpu_enabled',
                            cmd_args.gpu,
                            "Enables the use of GPU for Convolutions")
tf.app.flags.DEFINE_float('learning_rate',
                          cmd_args.learnrate,
                          "Optimizer learning rate")

# Define configurations for the Convolutional Autoencoder
# To get a preview of the options that can be set, print(sets)
sets = autoencoder.ConvAutoEncSettings()
sets.prefix_name = "test"
sets.input_shape = [FLAGS.batch_size, 193, 193, 1]
sets.corruption = False
sets.layers = 1
sets.patch_size = 32
sets.strides = [1, 2, 2, 1]
sets.padding = 'SAME'
sets.depth_increasing = 2
sets.residual_learning = cmd_args.residuals

def batch_loop(length):
    for i in range(0, length//FLAGS.batch_size):
        init = i * FLAGS.batch_size
        ends = (i + 1) * FLAGS.batch_size
        yield(init, ends)

# Check if there is a checkpoint to restore
RESTORE = os.path.isfile(FLAGS.saver_dir)

# Loading the Convolutional Autoencoder
cae = autoencoder.ConvAutoEnc(sets)

# Loading training sets
with open(FLAGS.dataset_file, "rb") as f:

    no_batch = pickle.load(f)
    assert type(no_batch) is int, "First reading of the batch must be an integer (number of batches)"
    BATCH_LIMIT = no_batch if BATCH_LIMIT > no_batch else BATCH_LIMIT
    counter = 0

    with tf.Session(graph=cae.graph) as session:
        try:
            cae.optimizer = tf.train.AdamOptimizer(FLAGS.learning_rate, name="Optimizer").minimize(cae.error)
            saver = tf.train.Saver()
            if RESTORE:
                saver.restore(session, FLAGS.saver_dir)
            session.run(tf.initialize_all_variables())

            # Creating srm -rf /tmp/training-nnession objects
            merged = tf.merge_all_summaries()
            writer = tf.train.SummaryWriter(FLAGS.train_dir, session.graph)
            result = [None, 9999.9999]

            # Training mrm -rf /tmp/training-nnain loop. It is a nested loop of three loops
            #  1. dataset reading from file loop
            #  2. dataset read batch subdivision
            #  3. optimization steps on batch subdivision
            with tf.name_scope("Training"):
                for b in range(0, BATCH_LIMIT):
                    log("RUNNING BATCH: %d (c: %i, e: %5.10f)" % (b, counter, result[1]))
                    dataset = pickle.load(f)
                    for init, ends in batch_loop(np.shape(dataset)[0]):
                        with Timer(): # batch timiimport pdbng
                            for step in range(0, FLAGS.max_steps):
                                result = session.run([cae.optimizer], feed_dict={cae.x: dataset[init:ends, :, :, :]})
                                counter += 1
                            result = session.run([merged, cae.error], feed_dict={cae.x: dataset[init:ends, :, :, :]})
                            log("Error at step %i is: %5.10f" % (counter, result[1]), 2)
                            writer.add_summary(result[0], counter)
                            saver.save(session, FLAGS.saver_dir)

        #except PicklingError as error:
        #    pdb.set_trace()
        #    log("Something went wrong reading pickle file")
        finally:
            log("Exception Raised!")
            saver.save(session, FLAGS.saver_dir)



log("Learning Completed")
notify("Learning completed")
exit(0)
